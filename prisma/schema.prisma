generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserStatusEnum {
  ACTIVE
  SUSPENDED
  LOCKED
}

enum GenderEnum {
  MALE
  FEMALE
  OTHER
}

model User {
  id             String         @id @default(uuid())
  email          String         @unique
  email_verified DateTime?
  name           String
  birth_date     String?
  phone_number   String?
  gender         GenderEnum?
  image          String?
  password_hash  String?
  status         UserStatusEnum @default(ACTIVE)
  created_at     DateTime       @default(now())
  updated_at     DateTime       @updatedAt
  user_roles     UserRole[]
  mfa            MFA?
  accounts       Account[]
  alarms         Alarm[]
  timers         Timer[]
  images         Image[]
}

model MFA {
  user_id     String
  secret_key  String
  last_access DateTime @updatedAt
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  user        User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@id([user_id])
}

model Account {
  id            String  @id @default(uuid())
  user_id       String // Khóa ngoại liên kết với User
  provider      String // Ví dụ: 'google', 'facebook', 'github'
  provider_id   String // ID từ nhà cung cấp OAuth
  access_token  String? // Token từ OAuth
  refresh_token String?
  expires_at    Int? // Thời gian hết hạn token
  token_type    String?
  scope         String?
  id_token      String? // ID Token (OIDC)
  session_state String?
  user          User    @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([provider, provider_id])
}

// Role
model UserRole {
  user_id    String
  role_id    String
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  role       Role     @relation(fields: [role_id], references: [id], onDelete: Cascade)
  created_at DateTime @default(now())

  @@id([user_id, role_id])
}

model Role {
  id          String     @id @default(uuid())
  name        String
  permissions String[]   @default([])
  created_at  DateTime   @default(now())
  updated_at  DateTime   @updatedAt
  user_roles  UserRole[]
}

model Image {
  id         String   @id @default(uuid())
  url        String
  filename   String
  size       Int
  mimeType   String
  width      Int?
  height     Int?
  uploadedAt DateTime @default(now())
  userId     String?
  user       User?    @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([userId])
}

// Facility
enum LocationTypeEnum {
  Factory
  Warehouse
}

model Location {
  id            String           @id @default(uuid())
  location_name String
  address       String
  location_type LocationTypeEnum
  rooms         Room[]
  created_at    DateTime         @default(now())
  updated_at    DateTime         @updatedAt

  @@index([location_name, address])
}

model Room {
  id                  String             @id @default(uuid())
  room_name           String
  location_id         String
  location            Location           @relation(fields: [location_id], references: [id])
  created_at          DateTime           @default(now())
  updated_at          DateTime           @updatedAt
  // roomDisplays      RoomDisplay[]
  room_alarms         RoomAlarm[]
  room_timers         RoomTimer[]
  display_order_rooms DisplayOrderRoom[]

  @@unique([location_id, room_name])
  @@index([location_id, room_name])
}

// Product
enum ProductUnit {
  CARTON
  PACKAGED_GOODS
}

model Product {
  id         String   @id @default(uuid())
  prod_name  String
  images     String[]
  pack_spec  Int      @default(0)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

// TV Display 
enum DisplayOrderStatus {
  TO_DO
  ON_PROGRESS
  COMPLETED
}

model DisplayOrderProduct {
  id               String       @id @default(uuid())
  prod_name        String
  image            String
  unit             ProductUnit
  priority         Int          @default(0)
  quantity         Int
  pack_spec        Int
  note             String[]     @default([])
  display_order_id String
  display_order    DisplayOrder @relation(fields: [display_order_id], references: [id], onDelete: Cascade)
  created_at       DateTime     @default(now())
  updated_at       DateTime     @updatedAt
}

model DisplayOrder {
  id                  String                @id @default(uuid())
  cus_name            String
  priority            Int                   @default(0)
  status              DisplayOrderStatus    @default(TO_DO)
  note                String[]              @default([])
  address             String                @default("")
  phone_number        String                @default("")
  created_at          DateTime              @default(now())
  updated_at          DateTime              @updatedAt
  products            DisplayOrderProduct[]
  display_order_rooms DisplayOrderRoom[]
}

model DisplayOrderRoom {
  room_id          String
  display_order_id String
  room             Room         @relation(fields: [room_id], references: [id], onDelete: Cascade)
  display_order    DisplayOrder @relation(fields: [display_order_id], references: [id], onDelete: Cascade)
  created_at       DateTime     @default(now())

  @@id([room_id, display_order_id])
}

// TV Display
// model RoomDisplay {
//   roomId    String
//   displayId String
//   room      Room    @relation(fields: [roomId], references: [id], onDelete: Cascade)
//   display   Display @relation(fields: [displayId], references: [id], onDelete: Cascade)

//   @@id([roomId, displayId])
// }

// model Display {
//   id           String        @id @default(uuid())
//   content      String
//   enable       Boolean       @default(true)
//   priority     Int           @default(0)
//   userId       String
//   createdBy    User          @relation(fields: [userId], references: [id])
//   createdAt    DateTime      @default(now())
//   updatedAt    DateTime      @updatedAt
//   roomDisplays RoomDisplay[]

//   @@index([enable, userId])
// }

// Clock 
model RoomAlarm {
  room_id  String
  alarm_id String
  room     Room   @relation(fields: [room_id], references: [id], onDelete: Cascade)
  alarm    Alarm  @relation(fields: [alarm_id], references: [id], onDelete: Cascade)

  @@id([room_id, alarm_id])
}

model Alarm {
  id          String      @id @default(uuid())
  time        String //HH:mm
  label       String      @default("")
  enable      Boolean     @default(true)
  repeat      String[]    @default([])
  user_id     String
  created_by  User        @relation(fields: [user_id], references: [id])
  created_at  DateTime    @default(now())
  updated_at  DateTime    @updatedAt
  room_alarms RoomAlarm[]
}

model RoomTimer {
  room_id  String
  timer_id String
  room     Room   @relation(fields: [room_id], references: [id], onDelete: Cascade)
  timer    Timer  @relation(fields: [timer_id], references: [id], onDelete: Cascade)

  @@id([room_id, timer_id])
}

model Timer {
  id             String      @id @default(uuid())
  time           String //HH:mm:ss
  remaining_time Int? //(milliseconds)
  label          String      @default("")
  status         String      @default("running") // pause | running 
  created_at     DateTime    @default(now())
  user_id        String
  created_by     User        @relation(fields: [user_id], references: [id])
  room_timers    RoomTimer[]
}
